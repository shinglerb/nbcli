{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nbcli: NetBox Command-Line Client","text":"<p>Extensible command-line interface for Netbox using the pynetbox module. </p>"},{"location":"#notable-features","title":"Notable Features","text":"<ul> <li> <p>Search Netbox instance</p> </li> <li> <p>Filter Netbox objects</p> </li> <li> <p>Create and update Netbox objects with YAML file</p> </li> <li> <p>Shell with preloaded pynetbox endpoints</p> </li> <li> <p>Custom Views</p> </li> <li> <p>Custom Commands</p> </li> </ul>"},{"location":"quick-start/","title":"Get Started","text":""},{"location":"quick-start/#install","title":"Install","text":"<pre><code>$ pip3 install nbcli\n</code></pre>"},{"location":"quick-start/#configure","title":"Configure","text":"<pre><code>$ nbcli init\nEdit pynetbox 'url' and 'token' entries in user_config.yml:\n        ~/.nbcli/user_config.yml\n</code></pre> <p>At the very minimum, you need to specify a url and token in the user_config.yml file</p> <pre><code>pynetbox:\nurl: http://localhost:8080\ntoken: 0123456789abcdef0123456789abcdef01234567\n</code></pre> <p>If you need to disable SSL verification, add (or uncomment) the following to your user_config.yml file. </p> <pre><code>requests:\nverify: false\n</code></pre>"},{"location":"quick-start/#info","title":"Info","text":"<p>List version info</p> <pre><code>$ nbcli info\n\nnbcli version: 0.8.0.dev1\nNetBox version: 2.11\npynetbox version: 6.6.2\n</code></pre> <p>List information on supported Netbox object types</p> <pre><code>$ nbcli info --models\nModel                         Lookup   Endpoint\ntenant_group                  name     tenancy/tenant-groups\ntenant                        name     tenancy/tenants\nregion                        name     dcim/regions\nsite                          name     dcim/sites\nlocation                      name     dcim/locations\nrack_role                     name     dcim/rack-roles\nrack                          name     dcim/racks\n...\n</code></pre> <pre><code>$ nbcli info --models device\n\nModel: device\nLookup: name\nView Name: DcimDevicesView\nAPI Endpoint: http://localhost:8080/api/dcim/devices\n</code></pre>"},{"location":"quick-start/#search","title":"Search","text":"<p>Simple search of Netbox objects with searchterm.</p> <pre><code>$ nbcli search compute\n\nDevice\n======\nName       Status  Tenant  Site  Rack  Role    Type    IP Address\ncompute-1  Active  ENCOM   DC 1  1.2   Server  A-BL-S  10.0.0.1\ncompute-2  Active  ENCOM   DC 1  1.2   Server  A-BL-S  10.0.0.2\ncompute-3  Active  ENCOM   DC 1  1.2   Server  A-BL-S  10.0.0.3\ncompute-4  Active  ENCOM   DC 1  1.2   Server  A-BL-S  10.0.0.4\n\nAddress\n=======\nIP Address   Vrf  Status  Role  Tenant  Parent  Interface  DNS Name               Description\n10.0.0.1/24  -    Active  -     ENCOM   -       -          compute-1.example.com  -\n10.0.0.2/24  -    Active  -     ENCOM   -       -          compute-2.example.com  -\n10.0.0.3/24  -    Active  -     ENCOM   -       -          compute-3.example.com  -\n10.0.0.4/24  -    Active  -     ENCOM   -       -          compute-4.example.com  -\n</code></pre>"},{"location":"quick-start/#filter","title":"Filter","text":"<p>Filter specified Netbox object type with searchterm, keyword arguments, or auto-resolve arguments</p> <pre><code>$ nbcli filter device web\nName         Status  Tenant  Site  Rack  Role    Type    IP Address\nweb-1        Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-2        Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-3        Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-proxy-1  Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\n</code></pre> <pre><code>$ nbcli filter device role=server\nName         Status  Tenant  Site  Rack  Role    Type    IP Address\ncompute-1    Active  ENCOM   DC 1  1.2   Server  A-BL-S  -\ncompute-2    Active  ENCOM   DC 1  1.2   Server  A-BL-S  -\ncompute-3    Active  ENCOM   DC 1  1.2   Server  A-BL-S  -\ncompute-4    Active  ENCOM   DC 1  1.2   Server  A-BL-S  -\ndb-1         Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\ndb-2         Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-1        Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-2        Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-3        Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\nweb-proxy-1  Active  ENCOM   DC 1  1.1   Server  A-1U-S  -\n</code></pre> <pre><code>$ nbcli filter device rack:1.2\nName       Status  Tenant  Site  Rack  Role     Type    IP Address\nchassis-1  Active  ENCOM   DC 1  1.2   Chassis  A-2U-C  -\ncompute-1  Active  ENCOM   DC 1  1.2   Server   A-BL-S  -\ncompute-2  Active  ENCOM   DC 1  1.2   Server   A-BL-S  -\ncompute-3  Active  ENCOM   DC 1  1.2   Server   A-BL-S  -\ncompute-4  Active  ENCOM   DC 1  1.2   Server   A-BL-S  -\n</code></pre>"},{"location":"quick-start/#create","title":"Create","text":"<p>Create and update objects defined in a yaml file</p> <pre><code>$ nbcli create create-test.yml\n[INFO](nbcli.create): Creating region with data: {'name': 'USA', 'slug': 'usa'}\n[INFO](nbcli.create): Creating region with data: {'name': 'New York', 'slug': 'newyork', 'parent': 1}\n[INFO](nbcli.create): Creating region with data: {'name': 'LA', 'slug': 'la', 'parent': 1}\n[INFO](nbcli.create): Creating region with data: {'name': 'UK', 'slug': 'uk'}\n[INFO](nbcli.create): Creating region with data: {'name': 'London', 'slug': 'london', 'parent': 4}\n[INFO](nbcli.create): Creating site with data: {'name': 'NY DC-1', 'slug': 'ny-dc-1', 'region': 2, 'status': 'active'}\n[INFO](nbcli.create): Creating site with data: {'name': 'LA DC-1', 'slug': 'la-dc-1', 'region': 3, 'status': 'active'}\n[INFO](nbcli.create): Creating site with data: {'name': 'London DC-1', 'slug': 'london-dc-1', 'region': 5, 'status': 'active'}\n[INFO](nbcli.create): Creating manufacturer with data: {'name': 'Cisco', 'slug': 'cisco'}\n[INFO](nbcli.create): Creating manufacturer with data: {'name': 'Dell', 'slug': 'dell'}\n[INFO](nbcli.create): Creating manufacturer with data: {'name': 'Hitachi', 'slug': 'hitachi'}\n[INFO](nbcli.create): Creating manufacturer with data: {'name': 'IBM', 'slug': 'ibm'}\n[INFO](nbcli.create): Creating device_type with data: {'model': 'R640', 'manufacturer': 3, 'slug': 'r640', 'u_height': 1}\n</code></pre>"},{"location":"quick-start/#shell","title":"Shell","text":"<p>Interactive shell with preloaded pynetbox objects.</p> <pre><code>$ nbcli shell\nPython 3.8.1 | NetBox 2.11 | pynetbox 5.3.1\nRoot pynetbox API object: Netbox\nAdditional utilities available:\n        lsmodels(), nbprint(), nblogger\n&gt;&gt;&gt; nbprint(Device.filter('web'))\nName         Status  Tenant  Site     Rack  Role    Type    IP Address\nweb-1        Active  ENCOM   NY DC-1  1.1   Server  A-1U-S  -\nweb-2        Active  ENCOM   NY DC-1  1.1   Server  A-1U-S  -\nweb-3        Active  ENCOM   NY DC-1  1.1   Server  A-1U-S  -\nweb-proxy-1  Active  ENCOM   NY DC-1  1.1   Server  A-1U-S  -\n&gt;&gt;&gt;\n</code></pre>"},{"location":"test-env/","title":"Setting up a test environment","text":"<p>Instructions should work on Mac and Linux. Instructions require python &gt;= 3.6, git, and docker-compose to be installed.</p>"},{"location":"test-env/#clone-nbcli-repo","title":"Clone nbcli repo","text":"<pre><code>git clone https://github.com/ericgeldmacher/nbcli.git &amp;&amp; \\\ncd nbcli\n</code></pre>"},{"location":"test-env/#set-up-a-virtual-environment","title":"Set up a virtual environment","text":"<p>Optional</p> <pre><code>python3 -m venv venv &amp;&amp; \\\nsource venv/bin/activate\n</code></pre>"},{"location":"test-env/#install-nbcli","title":"Install nbcli","text":"<ul> <li> <p>From Pypi</p> <pre><code>pip3 install nbcli\n</code></pre> </li> <li> <p>From source</p> <pre><code>pip3 install -e .\n</code></pre> </li> </ul>"},{"location":"test-env/#set-an-alternate-nbcli-directory","title":"Set an alternate nbcli directory","text":"<p>Optional</p> <pre><code>export NBCLI_DIR=$(pwd)/.nbcli_testing\n</code></pre>"},{"location":"test-env/#initialize-nbcli","title":"Initialize nbcli","text":"<p>The default values in user_config.yml should work</p> <pre><code>nbcli init\n</code></pre>"},{"location":"test-env/#create-test-server","title":"Create test server","text":""},{"location":"test-env/#clone-netbox-docker-repo","title":"Clone netbox-docker repo","text":"<p>and copy needed files into netbox-docker directory</p> <pre><code>git clone https://github.com/netbox-community/netbox-docker.git &amp;&amp; \\\ncp -r tests/docker-compose.override.yml netbox-docker/ &amp;&amp; \\\ncd netbox-docker\n</code></pre>"},{"location":"test-env/#start-test-netbox-service","title":"Start test Netbox service","text":"<p>service usually take ~1 min to come up</p> <pre><code>docker-compose pull &amp;&amp; \\\ndocker-compose up -d\n</code></pre> <p>The test Netbox instance should now be ready for testing!</p>"},{"location":"test-env/#after-testing","title":"After testing","text":"<p>Bring down test Netbox service and deactivate virtual environment.</p> <pre><code>docker-compose down -v &amp;&amp; \\\ndeactivate\n</code></pre>"},{"location":"commands/create/","title":"nbcli create","text":"<pre><code>$ nbcli create -h\nusage: nbcli create [-h] [-v] [-q] file\n\nCreate and/or Update objects defined in YAML file.\n\npositional arguments:\n  file           YAML file.\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --verbose  Show more logging messages\n  -q, --quiet    Show fewer logging messages\n\nRun command.\n\nSee documentation and reference examples.\nhttps://ericgeldmacher.github.io/nbcli/latest/commands/create/\nhttps://ericgeldmacher.github.io/nbcli/latest/reference/create-examples/\n\nUsage Examples:\n\n- Create/Update objects defined in YAML file\n  $ nbcli create file.yml\n</code></pre>"},{"location":"commands/filter/","title":"nbcli filter","text":"<pre><code>$ nbcli filter -h\nusage: nbcli filter [-h] [-v] [-q] [--json | --detail] [--view VIEW]\n                    [--cols [COLS [COLS ...]]] [--nh] [--dl]\n                    [-a | -c | -D | --ud [UD [UD ...]]] [--de [DE [DE ...]]]\n                    [--pre PRE]\n                    model [args [args ...]]\n\nFilter Netbox objects by searchterm and object properties.\n\nOptionally update and delete objects returned by the filter.\nControl output view and listed columns.\n\npositional arguments:\n  model                 NetBox model.\n  args                  Argument(s) to filter results.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Show more logging messages\n  -q, --quiet           Show fewer logging messages\n  --json                Display results as json string.\n  --detail              Display more detailed info for results.\n  --view VIEW           View model to use\n  --cols [COLS [COLS ...]]\n                        Custom columns for table output.\n  --nh, --no-header     Disable header row in results\n  --dl, --disable-limit\n                        Disable limiting number of results returned.\n  -a, --all             List all object from endpoint.\n  -c, --count           Return the count of objects in filter.\n  -D, --delete          Delete Object(s) returned by filter. [WIP]\n  --ud [UD [UD ...]], --update [UD [UD ...]]\n                        Update object(s) returned by filter with given kwargs. [WIP]\n  --de [DE [DE ...]], --detail-endpoint [DE [DE ...]]\n                        List results from detail endpoint With optional kwargs. [WIP]\n  --pre PRE, --stdin-prefix PRE\n                        Prefix to add to stdin args.\n\nFilter Netbox objects by a searchterm and object properties.\n\nUsage Examples:\n\n- Filter IP Addresses with searchterm '192.168.1.1':\n  $ nbcli filter address 192.168.1.1\n\n- Filter devices by serial number using keyword arguments:\n  $ nbcli filter device serial=123456\n\n- Filter devices types by manufacturer using auto-resolve arguments: \n  $ nbcli filter device_type manufacturer:ACME\n\n- Update tenant on devices returned by filter:\n  $ nbcli filter device name=server1 -ud tenant:tenant2\n\n- Delete IP addresses returned by filter:\n  $ nbcli filter address 192.168.1.1 -D\n</code></pre> <p>The <code>filter</code> command is designed to emulate the \"list view\" of the Netbox web interface. Results can be refined with a search term, keyword, \"auto-resolve\", and \"compound-resolve\" arguments.</p> <p>Objects returned by the filter can optionally updated or deleted.</p>"},{"location":"commands/filter/#basic-usage","title":"Basic usage","text":"<p>The simplest way to use the <code>filter</code> command is just to pass a search term. Any argument not containing an <code>=</code> or <code>:</code> will be considered a search term argument.</p> <pre><code>nbcli filter device webserver\n</code></pre> <p>Multiple search terms can be passed to the <code>filter</code> command, but only the first will be used. If your search term needs to contain a space, make sure to wrap it in quotes.</p> <pre><code>nbcli filter device 'web server'\n</code></pre> <p>Search term arguments can be mixed and matched with any combination of keyword, auto-resolve, and compound-resolve arguments to refine your filter.</p> <p>Note</p> <p>The <code>filter</code> command will limit the number of returned results to 50 by default. Adding the <code>--dl</code> argument will return all results.</p> <p>The default can be changed in the <code>user_config.yml</code> file by editing the value for <code>filter_limit</code>. <pre><code>    nbcli:\n      filter_limit: 50\n</code></pre></p> <p>This feature can be overridden completely by setting <code>filter_limit</code> to <code>0</code></p>"},{"location":"commands/filter/#keyword-arguments","title":"Keyword arguments","text":"<p>Any argument containing an <code>=</code> will be considered a keyword argument in the form of <code>key=value</code>. </p> <pre><code>nbcli filter device serial=123456\n</code></pre> <p>Note</p> <p>Keyword arguments are passed to the given REST API endpoint via pynetbox so a familiarity with the Netbox's REST API will help. You can find your Netbox instances API docs at https://your.netbox.url/api/docs You may also want to have a look at  Netbox's Documentation on REST API Filtering</p> <p>Multiple keyword arguments can be passed to the <code>filter</code> command and all will be used to refine the filter.</p> <pre><code>nbcli filter address parent=192.168.1.0/24 status=reserved\n</code></pre> <p>Some keyword arguments can be \"stacked\" where multiple values can be passed for the same key. (This only applies if it is supported by the given parameter of the REST API endpoint.)</p> <pre><code>nbcli filter address status=dhcp status=reserved\n</code></pre>"},{"location":"commands/filter/#auto-resolve-arguments-wip","title":"Auto-resolve arguments [WIP]","text":"<p>Any argument containing a <code>:</code> will be considered an auto-resolve argument in the form of <code>object:name</code>.</p> <p>The following will list all devices in rack 1.1</p> <pre><code>nbcli filter device rack:1.1\n</code></pre> <p>These can also be combined to refine the filter.</p> <pre><code>nbcli filter device rack:1.1 device_type:R840\n</code></pre> <p>And stacked to include more results</p> <pre><code>nbcli filter device rack:1.1 rack:1.2\nnbcli filter device rack:1.1:1.2\n</code></pre> <p>Note</p> <p>Behind the sceans, auto-resolve arguments are essantally running another <code>filter</code> command and passing the <code>id</code> values of the results as to the main <code>filter</code> command. So <code>nbcli filter device rack:1.1</code> is running: <pre><code>nbcli filter rack name=1.1\n</code></pre> and then modifying the origenal <code>filter</code> command to be: <pre><code>nbcli filter device rack_id=1\n</code></pre> For most object types, the  value after the <code>:</code>, is applyed to the key <code>name</code>. You can override this behavior by inserting a keyword argument after the <code>:</code> The following command should return all devices in racks with the status <code>reserved</code>: <pre><code>nbcli filter device rack:status=reserved\n</code></pre></p>"},{"location":"commands/filter/#compound-resolve-arguments-wip","title":"Compound-resolve arguments [WIP]","text":"<p>Any argument containing a <code>::</code> will be considered a compound-resolve argument in the form of <code>object::object:name</code>.</p> <p>Compound-resolve arguments take the concept of auto-resolve further, by allowing you to apply an auto-resolve to an auto-resolve. This allows you to put more precise constraints on your auto-resolve arguments.</p> <p>For instance you can list interfaces matching the search term 'eth' only on devices in rack 1.1.</p> <pre><code>nbcli filter interface eth device::rack:1.1\n</code></pre>"},{"location":"commands/filter/#modifying-results","title":"Modifying results","text":"<p>Results from the filter can be updated or deleted. You will always be prompted to confirm when updating or deleting.</p>"},{"location":"commands/filter/#updating","title":"Updating","text":"<p>Update objects returned by filter. Values can be updated with keyword arguments and/or auto-resolve arguments.</p> <pre><code>$ nbcli filter rack tenant:ENCOM --ud status=reserved 'site:NY DC-1'\nUpdate Racks with {'status': 'reserved', 'site': 2}?\n* 1.1 (1)\n* 1.2 (2)\n(yes) to update: yes\n1.1 (1) Updated!\n1.2 (2) Updated!\n</code></pre>"},{"location":"commands/filter/#deleting","title":"Deleting","text":"<p>Delete objects returned by filter.</p> <pre><code>$ nbcli filter device db -D\nDelete Devices?\n* db-1 (5)\n* db-2 (6)\n(yes) to delete: yes\ndb-1 (5) Deleted!\ndb-2 (6) Deleted!\n</code></pre>"},{"location":"commands/filter/#detail-endpoint","title":"Detail Endpoint","text":"<p>pynetbox DetailEndpoint objects can be access with the <code>--de</code> flag.</p> <pre><code>nbcli filter prefix 192.168.1.0/24 --de available_ips\n</code></pre>"},{"location":"commands/filter/#controlling-output","title":"Controlling output","text":"<p>The following optional arguments can change how the results of the filter command are displayed.</p> <pre><code>  --json                Display results as json string.\n  --detail              Display more detailed info for results.\n  --view VIEW           View model to use\n  --cols [COLS [COLS ...]]\n                        Custom columns for table output.\n  --nh, --no-header     Disable header row in results\n</code></pre>"},{"location":"commands/filter/#-json","title":"--json","text":"<p>Display results as json string. Output should be similar (but may not be exactly the same) as the contents from the <code>results</code> field when accessing the Netbox API directly.</p>"},{"location":"commands/filter/#-detail","title":"--detail","text":"<p>Display more detailed info for results.</p>"},{"location":"commands/filter/#-view","title":"---view","text":"<p>Override the default view model for the given object types with one defined by a User Custom View or extention, by specifying it's Class name.</p> <pre><code>nbcli filter device rack:1.1 --view MyDevicesView\n</code></pre>"},{"location":"commands/filter/#-cols","title":"--cols","text":"<p>Specify object attributes to display in table view.</p> <pre><code>$ nbcli filter device tenant:ENCOM --cols name rack position device_type\nname         rack  position  device_type\nchassis-1    1.2   1         A-2U-C\ncompute-1    1.2   -         A-BL-S\ncompute-2    1.2   -         A-BL-S\ncompute-3    1.2   -         A-BL-S\ncompute-4    1.2   -         A-BL-S\nweb-1        1.1   2         A-1U-S\nweb-2        1.1   3         A-1U-S\nweb-3        1.1   4         A-1U-S\nweb-proxy-1  1.1   1         A-1U-S\n</code></pre> <p>Tip</p> <p>Looking at the json view will give you some insite on what attribues are available for a given object type. <pre><code>$ nbcli filter device compute-1 --json | jq\n</code></pre> or <pre><code>$ nbcli filter device compute-1 --json | python3 -m json.tool\n</code></pre></p> <p>If the attribute is an instance of another object type, you can <code>drill into</code> that object to grab it's attributes</p> <pre><code>$ nbcli filter device tenant:ENCOM --cols name rack position parent_device parent_device.position parent_device.device_bay\nname         rack  position  parent_device  parent_device.position  parent_device.device_bay\nchassis-1    1.2   1         -              -                       -\ncompute-1    1.2   -         chassis-1      1                       1\ncompute-2    1.2   -         chassis-1      1                       2\ncompute-3    1.2   -         chassis-1      1                       3\ncompute-4    1.2   -         chassis-1      1                       4\nweb-1        1.1   2         -              -                       -\nweb-2        1.1   3         -              -                       -\nweb-3        1.1   4         -              -                       -\nweb-proxy-1  1.1   1         -              -                       -\n</code></pre> <p><code>--cols</code> should fail gracefully, so if the attribute does not exist, or is null, or and empty string the value will be displayed as an <code>-</code></p> <pre><code>$ nbcli filter device tenant:ENCOM --cols name bad_attr bad_attr.child_attr\nname         bad_attr  bad_attr.child_attr\nchassis-1    -         -\ncompute-1    -         -\ncompute-2    -         -\ncompute-3    -         -\ncompute-4    -         -\nweb-1        -         -\nweb-2        -         -\nweb-3        -         -\nweb-proxy-1  -         -\n</code></pre>"},{"location":"commands/filter/#-nh-no-header","title":"--nh, --no-header","text":"<p>Allows you to remove the header row in the table view. (Useful for when piping to another shell command.)</p>"},{"location":"commands/info/","title":"nbcli info","text":"<pre><code>$ nbcli info --help\nusage: nbcli info [-h] [-v] [-q] [--detailed] [--models [MODELS]]\n\nView Information about nbcli instance.\n\noptional arguments:\n  -h, --help         show this help message and exit\n  -v, --verbose      Show more logging messages\n  -q, --quiet        Show fewer logging messages\n  --detailed         Show more detailed info.\n  --models [MODELS]  Display detailed info on given model.\n\nView Information about nblci instance.\n\nExample Usage:\n\n- Show version info\n  $ nbcli info\n\n- Show more detailed info\n  $ nbcli info --detailed\n\n- List all supported models\n  $ nbcli info --models\n\n- Show information of device model\n  $ nbcli info --models device\n</code></pre>"},{"location":"commands/init/","title":"nbcli init","text":"<pre><code>$ nbcli init -h\nusage: nbcli init [-h] [-v] [-q]\n\nInitialize nbcli.\n\nDefault confg directory location $HOME/.nbcli\nAfter running edit $HOME/.nbcli/user_config.yml with your credentials.\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --verbose  Show more logging messages\n  -q, --quiet    Show fewer logging messages\n\nCreate nbcli config directory and related files.\n\nExample Usage:\n\n- Initialize nbcli\n  $ nbcli init\n</code></pre>"},{"location":"commands/init/#config-directory","title":"Config Directory","text":"<p>The default nbcli directory is :code:<code>~/.nbcli/</code> this can be changed by setting the NBCLI_DIR to a new directory</p> <pre><code>export NBCLI_DIR=/path/to/alt/directory\n</code></pre>"},{"location":"commands/init/#config-file","title":"Config File","text":"<p>The config file <code>user_config.yml</code> is located in the root of the config directory.</p> <p>Values defined under pynetbox will be directly used to create the pynetbox api instance. at minimum url and token need to be set.</p> <pre><code>pynetbox:\nurl: http://localhost:8080\ntoken: 0123456789abcdef0123456789abcdef01234567\n</code></pre> <p>Values defined under requests will be used to create a custom requests Session.</p> <p>If you need to disable SSL verification, add (or uncomment) the following to your user_config.yml file. </p> <pre><code>requests:\nverify: false\n</code></pre>"},{"location":"commands/search/","title":"nbcli search","text":"<pre><code>$ nbcli search -h\nusage: nbcli search [-h] [-v] [-q] [obj_type] searchterm\n\nSearch Netbox objects with the given searchterm.\n\nThe List of search objects can be modified in:\n$CONF_DIR/user_config.yml\n\npositional arguments:\n  obj_type       Object type to search\n  searchterm     Search term\n\noptional arguments:\n  -h, --help     show this help message and exit\n  -v, --verbose  Show more logging messages\n  -q, --quiet    Show fewer logging messages\n\nRun a search of Netbox objects and show a table view of results.\n\nUsage Examples:\n\n- Search all object types for 'server1':\n  $ nbcli search server1\n\n- Search the interface object type for 'eth 1':\n  $ nbcli search interface 'eth 1'\n</code></pre> <p>The <code>search</code> command is designed to emulate the main search bar that can be found at the top of the home page of the Netbox web interface.</p> <p>By default it will search through a predefined list of object types and return up to 15 results for each object type. If more then 15 results are found, it will display the filter command to show all the results.</p> <p>If your search term needs to contain a space, make sure to wrap it in quotes.</p> <pre><code>nbcli search 'web server'\n</code></pre> <p>If you only want to search one object type you can specify if before the search term. <code>nbcli search [obj_type] searchterm</code>.</p> <ul> <li> <p>Searching all object types for <code>server1</code>:</p> <pre><code>nbcli search server1\n</code></pre> </li> <li> <p>Searching only devices for <code>server1</code>:</p> <pre><code>nbcli search device server1\n</code></pre> </li> </ul> <p>The list of predefined object types that will be searched can be modified by editing the user_config.yml file.</p> <pre><code>nbcli:\n#  search_objects:\n#    - provider\n#    - circuit\n#    - site\n#    - rack\n#    - location\n#    - device_type\n#    - device\n#    - virtual_chassis\n#    - cable\n#    - power_feed\n#    - vrf\n#    - aggregate\n#    - prefix\n#    - address\n#    - vlan\n#    - secret\n#    - tenant\n#    - cluster\n#    - virtual_machine\n</code></pre> <p>Info</p> <p><code>nbcli search</code> relies on the <code>q</code> perameter being available for the GET method on the REST API endpoint. Make sure any object added to the <code>search_objects</code> list has the <code>q</code> perameter available for the GET method.</p> <p>Your Netbox instance API docs should be available at  https://your.netbox.url/api/docs</p>"},{"location":"commands/shell/","title":"nbcli shell","text":"<pre><code>nbcli shell -h\nusage: nbcli shell [-h] [-v] [-q] [-i] [-s {python,ipython}] [--skip] [script]\n\nLaunch Interactive Shell with pynetbox objects preloaded.\n\npositional arguments:\n  script                Script to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Show more logging messages\n  -q, --quiet           Show fewer logging messages\n  -c cmd                Program passed in as string\n  -i                    inspect interactively after running script\n  -s {python,ipython}, --interactive-shell {python,ipython}\n                        Specifies interactive shell to use\n  --skip                Skip loading models.\n\nRun Shell enviornment.\n\nExample usage:\n$ nbcli shell -i myscript.py\n$ nbcli shell -s python\n</code></pre>"},{"location":"extend/commands/","title":"Custom Commands","text":""},{"location":"extend/commands/#example-custom-command","title":"Example custom command","text":"<pre><code># For a user defined subcommand to be loaded into nbcli\n# it must be a subclass of BaseSubCommand, found in nbcli.commands.base\n\nfrom nbcli.commands.base import BaseSubCommand\n\nclass ExampleSubCommand(BaseSubCommand):\n\"\"\"This docstring will automatically be used as the command description.\n\n    You can override this behavior by setting a description\n    in the parser_kwargs dict.\n    \"\"\"\n\n    # name is required\n\n    name = 'hello'\n\n    # parser_kwargs is optional \n    # It shoud be a dict containing values you with to pass to\n    # the ArgumentParser for the command.\n    # (see https://docs.python.org/3/library/argparse.html)\n    # the value for 'help' will be displayed next to the command\n    # when 'nbcli -h' is run\n\n    parser_kwargs = dict(help='Say hello',\n                         #description=None,\n                         #epilog=None,\n                         )\n\n    # view_options is optional.\n    # If True it will add --view, --view-model, --cols, and --nh arguments\n    # to the command ArgumentParser and add a pre-configured nbprint() method\n    # available in run()\n\n    view_options = False\n\n    def setup(self):\n\n        # Any additional argument that need to be added to the command\n        # ArgumentParser should be added here.\n        # (see https://docs.python.org/3/library/argparse.html)\n\n        self.parser.add_argument('--name',\n                                 type=str,\n                                 default='World',\n                                 help='Who are you saying hello to?')\n\n    def run(self):\n\"\"\"This docstring will automatically be used as the command epilog.\n\n        You can override this behavior by setting an epilog\n        in the parser_kwargs dict.\n\n        Usage Examples:\n\n        - Say hello to the world\n          $ nbcli hello\n\n        - Say hello to John\n          $ nbcli hello --name John\n        \"\"\"\n\n        # self.netbox is the pre-configured root pynetbox api object\n        # to be used to interact with the NetBox REST API\n        # (see https://pynetbox.readthedocs.io/en/latest/)\n\n        # self.args is the parsed arguments for the command\n        # (see https://docs.python.org/3/library/argparse.html)\n\n        # self.logger is a logger with a pre-set name/loglevel\n        # set from parsed arguments\n        # (see https://docs.python.org/3/library/logging.html)\n\n        # self.nbprint will be added if view_options is set to True\n        # otherwise it can be imported from nbcli.views.tools\n\n        print('Hello, {}!'.format(self.args.name))\n</code></pre>"},{"location":"extend/views/","title":"Custom Views","text":""},{"location":"extend/views/#example-custom-view","title":"Example custom view","text":"<pre><code>from nbcli.views.tools import BaseView\n\nclass DcimRUsView(BaseView):\n\n    def table_view(self):\n\n        self.add_col('Name', self.get_attr('name'))\n        self.add_col('Device', self.get_attr('device'))\n\n\nclass MyDevicesView(BaseView):\n\n    def table_view(self):\n\n        self.add_col('Name', self.get_attr('name'))\n        self.add_col('Site', self.get_attr('site'))\n        self.add_col('Tenant', self.get_attr('tenant'))\n        self.add_col('Site', self.get_attr('site'))\n        self.add_col('Rack', self.get_attr('rack'))\n\n        manuf = self.get_attr('device_type.manufacturer')\n        dtype = self.get_attr('device_type')\n\n        self.add_col('Type', '{} {}'.format(manuf, dtype))\n</code></pre>"},{"location":"reference/nbprint/","title":"nbprint()","text":"<pre><code>&gt;&gt;&gt; devlist = Devices.filter('server')\n&gt;&gt;&gt; nbprint(devlist)\n&gt;&gt;&gt; nbprint(devlist, disable_header=True)\n&gt;&gt;&gt; nbprint(devlist, json_view=True)\n&gt;&gt;&gt; nbprint(devlist, detail_view=True)\n&gt;&gt;&gt; nbprint(devlist, cols=['name',\n...                        'device_type.manufacturer',\n...                        'device_type.model'])\n&gt;&gt;&gt; nbprint(devlist, cols=[('Name', 'name'),\n...                        ('Manufacturer', 'device_type.manufacturer'),\n...                        ('Model', 'device_type.model')])\n&gt;&gt;&gt; nbprint(devlist, view_model='MyDevicesView')\n&gt;&gt;&gt; from user_views import MyDevicesView\n&gt;&gt;&gt; nbprint(devlist, view_model=MyDevicesView)\n</code></pre> <pre><code>&gt;&gt;&gt; from nbcli.views.tools import Formatter\n&gt;&gt;&gt; f = Formatter(devlist)\n&gt;&gt;&gt; f.string\n</code></pre>"}]}